# https://golangci-lint.run/usage/configuration/
# https://github.com/golangci/golangci-lint/blob/master/pkg/config/linters_settings.go
---
run:
  timeout: 3m
  issues-exit-code: 1
  tests: true
  build-tags: []
  allow-parallel-runners: true
  go: '1.22'

output:
  formats:
    - format: colored-line-number
      path: stdout
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: false
  sort-results: true

linters:
  fast: true
  disable-all: true
  enable:
    - asasalint                 # check for pass []any as any in variadic func(...any)
    - asciicheck                # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk                   # Checks for dangerous unicode character sequences
    - bodyclose                 # checks whether HTTP response body is closed successfully
    - containedctx              # containedctx is a linter that detects struct contained context.Context field
    - contextcheck              # check whether the function uses a non-inherited context
    - cyclop                    # checks function and package cyclomatic complexity
    - decorder                  # check declaration order and count of types, constants, variables and functions
    - dogsled                   # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupword                   # checks for duplicate words in the source code
    - durationcheck             # check for two durations multiplied together
    - errchkjson                # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    - errname                   # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.
    - errorlint                 # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - execinquery               # execinquery is a linter about query string checker in Query function which reads your Go src files and warning it finds
    - exportloopref             # checks for pointers to enclosing loop variables
    - funlen                    # Tool for detection of long functions
    - ginkgolinter              # enforces standards of using ginkgo and gomega
    - gocheckcompilerdirectives # Checks that go compiler directive comments (//go:) are valid
    - gocognit                  # Computes and checks the cognitive complexity of functions
    - gocritic                  # Provides diagnostics that check for bugs, performance and style issues.
    - gocyclo                   # Computes and checks the cyclomatic complexity of functions
    - godot                     # Check if comments end in a period
    - gofmt                     # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - gofumpt                   # Gofumpt checks whether code was gofumpt-ed.
    - goimports                 # Check import statements are formatted according to the 'goimport' command. Reformat imports in autofix mode.
    - gomodguard                # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname          # Checks that printf-like functions are named with `f` at the end
    - gosec                     # Inspects source code for security problems
    - gosimple                  # Linter for Go source code that specializes in simplifying code
    - gosmopolitan              # Report certain i18n/l10n anti-patterns in your Go codebase
    - govet                     # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - grouper                   # An analyzer to analyze expression groups.
    - importas                  # Enforces consistent import aliases
    - inamedparam               # reports interfaces with unnamed method parameters [fast: true, auto-fix: false]
    - ineffassign               # Detects when assignments to existing variables are not used
    - intrange                  # intrange is a linter to find places where for loops could make use of an integer range. [fast: true, auto-fix: false]
    - loggercheck               # Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).
    - maintidx                  # maintidx measures the maintainability index of each function.
    - makezero                  # Finds slice declarations with non-zero initial length
    - mirror                    # reports wrong mirror patterns of bytes/strings usage
    - misspell                  # Finds commonly misspelled English words in comments
    - musttag                   # enforce field tags in (un)marshaled structs [fast: false, auto-fix: false]
    - nakedret                  # Finds naked returns in functions greater than a specified function length
    - nestif                    # Reports deeply nested if statements
    - nilerr                    # Finds the code that returns nil even if it checks that the error is not nil.
    - nilnil                    # Checks that there is no simultaneous return of `nil` error and an invalid value.
    - noctx                     # noctx finds sending http request without context.Context
    - nolintlint                # Reports ill-formed or insufficient nolint directives
    - nosprintfhostport         # Checks for misuse of Sprintf to construct a host with port in a URL.
    - prealloc                  # Finds slice declarations that could potentially be pre-allocated
    - predeclared               # find code that shadows one of Go's predeclared identifiers
    - promlinter                # Check Prometheus metrics naming via promlint
    - protogetter               # Reports direct reads from proto message fields when getters should be used [fast: false, auto-fix: true]
    - reassign                  # Checks that package variables are not reassigned
    - revive                    # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - rowserrcheck              # checks whether Err of rows is checked successfully
    - sloglint                  # ensure consistent code style when using log/slog [fast: false, auto-fix: false]
    - spancheck                 # Checks for mistakes with OpenTelemetry/Census spans. [fast: false, auto-fix: false]
    - sqlclosecheck             # Checks that sql.Rows and sql.Stmt are closed.
    - staticcheck               # It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint.
    - stylecheck                # Stylecheck is a replacement for golint
    - tagalign                  # check that struct tags are well aligned
    - tenv                      # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - testableexamples          # linter checks if examples are testable (have an expected output)
    - thelper                   # thelper detects Go test helpers without t.Helper() call and checks the consistency of test helpers
    - unconvert                 # Remove unnecessary type conversions
    - unparam                   # Reports unused function parameters
    - unused                    # Checks Go code for unused constants, variables, functions and types
    - usestdlibvars             # A linter that detect the possibility to use variables/constants from the Go standard library
    - varnamelen                # checks that the length of a variable's name matches its scope
    - wastedassign              # wastedassign finds wasted assignment statements.
    - whitespace                # Tool for detection of leading and trailing whitespace
    - zerologlint               # Detects the wrong usage of `zerolog` that a user forgets to dispatch with `Send` or `Msg` [fast: false, auto-fix: false]

linters-settings:
  asasalint:
    exclude: []
    use-builtin-exclusions: true
    ignore-test: false
  cyclop:
    max-complexity: 15
    # package-average:
    skip-tests: true
  errorlint:
    errorf: true
    asserts: true
    comparison: true
  funlen:
    lines: 120
    statements: 60
  gocognit:
    min-complexity: 30
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - commentedOutCode
      - deprecatedComment
      - whyNoLint
    settings:
      hugeParam:
        sizeThreshold: 80
      rangeExprCopy:
        sizeThreshold: 512
      rangeValCopy:
        sizeThreshold: 128
  gocyclo:
    min-complexity: 30
  godot:
    scope: declarations
    capital: false
  gofmt:
    simplify: true
  gofumpt:
    extra-rules: true
  goimports:
    local-prefixes: go.lsp.dev/protocol/
  govet:
    enable-all: true
    disable:
      - fieldalignment
  importas:
    alias: []
    no-unaliased: true
  lll:
    line-length: 200
    tab-width: 1
  maintidx:
    under: 15
  misspell:
    locale: US
    ignore-words:
      - cancelled
      - cancelling
  nakedret:
    max-func-lines: 30
  nestif:
    min-complexity: 4
  prealloc:
    simple: true
    range-loops: true
    for-loops: true
  testpackage:
    skip-regexp: '.*(export)_test\.go'
  unparam:
    check-exported: true
  varnamelen:
    max-distance: 5
    min-name-length: 1
    check-receiver: true
    check-return: true
    ignore-type-assert-ok: false
    ignore-map-index-ok: false
    ignore-chan-recv-ok: false
  whitespace:
    multi-if: true
    multi-func: true

issues:
  include:
    # include revive rules
    - "EXC0013"
    - "EXC0014"
    - "EXC0015"
  max-issues-per-linter: 0
  exclude-dirs-use-default: true
  exclude-dirs: []
  exclude-files: []
  max-same-issues: 0
  exclude-use-default: true
  exclude-rules:
    - path: _test\.go
      linters:
        - errcheck
        - funlen
        - gocognit
        - goconst
        - gocyclo
        - gosec
        - lll
        - wrapcheck
    - path: "(.*)?_example_test.go"
      linters:
        - gocritic
    # Exclude shadow checking on the variable named err
    - text: "shadow: declaration of \"err|ok|ctx\""
      linters:
        - govet
    - text: "continue with no blank line before"
      linters:
        - nlreturn
