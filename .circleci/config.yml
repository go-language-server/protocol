version: 2.1

orbs:
  golang: cci-orb/golang@volatile
  codecov: codecov/codecov@1.1.3

executors:
  golang:
    docker:
      - image: golang:1.16-buster
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    working_directory: /go/src/go.lsp.dev/protocol

command_vars:
  - cache_key: &cache_key v1-go-mod-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
  - cache_tools_key: &cache_tools_key v1-go-tools-{{ checksum "tools/go.mod" }}-{{ checksum "tools/go.sum" }}

commands:
  restore_dependencies:
    steps:
      - restore_cache:
          name: "Restore dependencies tools"
          keys:
            - *cache_tools_key

  save_dependencies:
    steps:
      - save_cache:
          name: "Save dependencies tools"
          key: *cache_tools_key
          paths:
            - /go/src/go.lsp.dev/protocol/tools/bin/
      - persist_to_workspace:
          name: "Persist dependencies tools"
          root: "/go"
          paths:
            - src/go.lsp.dev/protocol/tools/bin

  install_tools:
    steps:
      - run:
          name: "Download dependency tools"
          command: |
            if [ -z $(find ./tools/bin/ -mindepth 1 -type f -executable | head -1) ]; then
              make -j${CPUS} tools
            fi

  setup:
    steps:
      - checkout
      - run:
          name: Check versions
          command: |
            go version
            go env
      - restore_cache:
          name: "Restore module cache"
          keys:
            - *cache_key
      - run:
          name: "Download modules"
          command: |
            go mod download
      - run:
          name: "Run go mod vendor"
          command: |
            go mod vendor
      - run:
          name: "Parse CPUs"
          command: |
            # https://circleci.com/changelog#container-cgroup-limits-now-visible-inside-the-docker-executor
            CPUS="$(echo $(($(cat /sys/fs/cgroup/cpu/cpu.shares) / 1024)))"
            echo "export CPUS=${CPUS}" >> $BASH_ENV

  set_goflags:
    steps:
      - run:
          name: "Set GOFLAGS"
          command: |
            echo "export GOFLAGS='-p=${CPUS} -cpu=${CPUS}'" >> $BASH_ENV

jobs:
  tools:
    executor: golang
    resource_class: large
    steps:
      - checkout
      - restore_dependencies
      - install_tools
      - save_dependencies

  test:
    executor: golang
    resource_class: xlarge
    parallelism: 2
    steps:
      - attach_workspace:
          name: "Attach tools"
          at: "/go"
      - set_goflags
      - run:
          name: Test and take a coverage
          environment:
            GOTESTSUM_FORMAT: standard-verbose
            GOTESTSUM_JUNITFILE: /tmp/test-results/tests.xml
            GOTESTSUM_JSONFILE: /tmp/test-results/tests.json
          command: |
            mkdir -p /tmp/test-results
            make $(circleci tests split .circleci/coverage-targets)
      - save_cache:
          name: "Save module cache"
          key: *cache_key
          paths:
            - /go/pkg/mod/cache
      - codecov/upload:
          file: "coverage.out"
          flags: $(if [ $CIRCLE_NODE_INDEX == 0 ]; then echo "json"; else echo "gojay"; fi)
          when: on_success

  lint:
    executor: golang
    resource_class: xlarge
    parallelism: 2
    steps:
      - attach_workspace:
          name: "Attach tools"
          at: "/go"
      - run:
          name: Run fmt and lint for sources
          command: |
            make lint GO_LINT_FLAGS="$(circleci tests split .circleci/lint-buildtags)" JOBS=${CPUS}
      - save_cache:
          name: "Save module cache"
          key: *cache_key
          paths:
            - /go/pkg/mod/cache

workflows:
  version: 2
  workflows:
    jobs:
      - tools:
          context: org-global

      - test:
          context: org-global
          requires:
            - tools
          pre-steps:
            - setup
          post-steps:
            - store_test_results:
                path: /tmp/test-results
            - store_artifacts:
                path: /tmp/test-results

      - lint:
          context: org-global
          requires:
            - tools
          pre-steps:
            - setup
